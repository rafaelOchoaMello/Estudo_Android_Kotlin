103.Passando objetos entre Activities

- Assim como é possível passar dados através de atributos, também podemos
fazer o mesmo transporte de informações quando nos referimos a objetos.

- Em essência, utilizamos o já estudado 'intent' para isto, mas com uma 
pequena configuração adicional. Para ajudarmos o intent a enviar
objetos, devemos utilizar o recurso 'Serializable'.

- O Serializable não é uma configuração que devem ser aplicada diretamente
ao intent, mas sim na classe em que desejamos ter um objeto trasmitido entre
as activities. Devemos declarar que a nossa classe implementa a interface
'Serializable'

- A captura do objeto na classe de destino também é bem simples, uma vez 
que nos é fornecido o método '.getSerializable()'. É importante notar
que ainda é necessário um casting para o tipo correto. 


>> Exemplo :: Classe pokémon <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

	import java.io.Serializable
	class Pokemon(val name: String, val level: Int) : Serializable {}




>> Exemplo :: Enviando um objeto de instância via intent <<<<<<<<<<<<<<<<<<

    val intent: Intent = Intent(this, segundaTela::class.java)

	val poke: Pokemon = Pokemon("Bulbasaur", 7)

	intent.putExtra("pokemon", poke)



>> Exemplo :: Capturando os dados na segunda activity <<<<<<<<<<<<<<<<<<<<<

	val dados: Bundle? = intent.extras

	//Elemento de display a ser atualizado
    val textoPokemon: TextView = findViewById(R.id.pokemonName)

 	if(dados !== null){
            
        //Captura dos dados do objeto - repare no casting ('as')
        val pokemon:Pokemon = dados.getSerializable("pokemon") as Pokemon

        //Atualiza o display na tela
        textoPokemon.setText(pokemon.name)
    }




(Ps): Para uma revisão da declaração de herança (extends) e implemento 
de interface (implements), ver o resumo de Kotlin 115 (OO)  


